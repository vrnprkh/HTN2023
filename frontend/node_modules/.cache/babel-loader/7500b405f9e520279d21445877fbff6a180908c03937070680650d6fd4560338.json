{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { multipartFormRequestOptions } from 'openai/core';\nexport class Transcriptions extends APIResource {\n  /**\n   * Transcribes audio into the input language.\n   */\n  create(body, options) {\n    return this.post('/audio/transcriptions', multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n}\n(function (Transcriptions) {})(Transcriptions || (Transcriptions = {}));","map":{"version":3,"names":["APIResource","multipartFormRequestOptions","Transcriptions","create","body","options","post"],"sources":["/home/zain/HTN2023/node_modules/openai/src/resources/audio/transcriptions.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from '../../core.js';\nimport { APIResource } from '../../resource.js';\nimport * as API from './index.js';\nimport { type Uploadable, multipartFormRequestOptions } from '../../core.js';\n\nexport class Transcriptions extends APIResource {\n  /**\n   * Transcribes audio into the input language.\n   */\n  create(body: TranscriptionCreateParams, options?: Core.RequestOptions): Core.APIPromise<Transcription> {\n    return this.post('/audio/transcriptions', multipartFormRequestOptions({ body, ...options }));\n  }\n}\n\nexport interface Transcription {\n  text: string;\n}\n\nexport interface TranscriptionCreateParams {\n  /**\n   * The audio file object (not file name) to transcribe, in one of these formats:\n   * flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file: Uploadable;\n\n  /**\n   * ID of the model to use. Only `whisper-1` is currently available.\n   */\n  model: (string & {}) | 'whisper-1';\n\n  /**\n   * The language of the input audio. Supplying the input language in\n   * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\n   * improve accuracy and latency.\n   */\n  language?: string;\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text/prompting)\n   * should match the audio language.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: json, text, srt,\n   * verbose_json, or vtt.\n   */\n  response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n}\n\nexport namespace Transcriptions {\n  export import Transcription = API.Transcription;\n  export import TranscriptionCreateParams = API.TranscriptionCreateParams;\n}\n"],"mappings":"AAAA;SAGSA,WAAW,QAAQ,iBAAiB;SAEnBC,2BAA2B,QAAQ,aAAa;AAE1E,OAAM,MAAOC,cAAe,SAAQF,WAAW;;;;QAI7CG,CAAAC,IAAO,EAA+BC,OAAE,EAA6B;WACnE,IAAO,CAAAC,IAAK,wBAAK,EAAAL,2BAAyB;MAAAG,IAA8B;MAAA,GAAIC;IAAK,GAAO;;;AAmD5F,WAAiBH,cAAc,MAAAA,cAAA,KAAAA,cAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}