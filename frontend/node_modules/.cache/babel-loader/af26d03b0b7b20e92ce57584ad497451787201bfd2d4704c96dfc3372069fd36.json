{"ast":null,"code":"import { FormData, File } from 'openai/_shims/form-data';\nimport { getMultipartRequestOptions } from 'openai/_shims/getMultipartRequestOptions';\nimport { fileFromPath } from 'openai/_shims/fileFromPath';\nimport { isFsReadStream } from 'openai/_shims/node-readable';\nexport { fileFromPath };\nexport const isResponseLike = value => value != null && typeof value === 'object' && typeof value.url === 'string' && typeof value.blob === 'function';\nexport const isFileLike = value => value != null && typeof value === 'object' && typeof value.name === 'string' && typeof value.lastModified === 'number' && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = value => value != null && typeof value === 'object' && typeof value.size === 'number' && typeof value.type === 'string' && typeof value.text === 'function' && typeof value.slice === 'function' && typeof value.arrayBuffer === 'function';\nexport const isUploadable = value => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(value, name, options = {}) {\n  var _a, _b, _c;\n  // If it's a promise, resolve it.\n  value = await value;\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name || (name = (_a = new URL(value.url).pathname.split(/[\\\\/]/).pop()) !== null && _a !== void 0 ? _a : 'unknown_file');\n    return new File([blob], name, options);\n  }\n  const bits = await getBytes(value);\n  name || (name = (_b = getName(value)) !== null && _b !== void 0 ? _b : 'unknown_file');\n  if (!options.type) {\n    const type = (_c = bits[0]) === null || _c === void 0 ? void 0 : _c.type;\n    if (typeof type === 'string') {\n      options = {\n        ...options,\n        type\n      };\n    }\n  }\n  return new File(bits, name, options);\n}\nasync function getBytes(value) {\n  var _a;\n  let parts = [];\n  if (typeof value === 'string' || ArrayBuffer.isView(value) ||\n  // includes Uint8Array, Buffer, etc.\n  value instanceof ArrayBuffer) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${(_a = value === null || value === void 0 ? void 0 : value.constructor) === null || _a === void 0 ? void 0 : _a.name}; props: ${propsForError(value)}`);\n  }\n  return parts;\n}\nfunction propsForError(value) {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map(p => `\"${p}\"`).join(', ')}]`;\n}\nfunction getName(value) {\n  var _a;\n  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || (\n  // For fs.ReadStream\n  (_a = getStringFromMaybeBuffer(value.path)) === null || _a === void 0 ? void 0 : _a.split(/[\\\\/]/).pop());\n}\nconst getStringFromMaybeBuffer = x => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\nconst isAsyncIterableIterator = value => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\nexport class MultipartBody {\n  constructor(body) {\n    this.body = body;\n  }\n  get [Symbol.toStringTag]() {\n    return 'MultipartBody';\n  }\n}\nexport const isMultipartBody = body => body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async opts => {\n  if (!hasUploadableValue(opts.body)) return opts;\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\nexport const multipartFormRequestOptions = async opts => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\nexport const createForm = async body => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\nconst hasUploadableValue = value => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue(value[k])) return true;\n    }\n  }\n  return false;\n};\nconst addFormValue = async (form, key, value) => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n  }\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map(entry => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n  } else {\n    throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n  }\n};","map":{"version":3,"names":["FormData","File","getMultipartRequestOptions","fileFromPath","isFsReadStream","isResponseLike","value","url","blob","isFileLike","name","lastModified","isBlobLike","size","type","text","slice","arrayBuffer","isUploadable","toFile","options","_a","_b","_c","URL","pathname","split","pop","bits","getBytes","getName","isView","ArrayBuffer","push","chunk","parts","Error","propsForError","props","Object","getOwnPropertyNames","map","p","join","getStringFromMaybeBuffer","filename","path","x","Buffer","String","undefined","Symbol","asyncIterator","MultipartBody","constructor","body","toStringTag","isMultipartBody","maybeMultipartFormRequestOptions","opts","hasUploadableValue","form","createForm","multipartFormRequestOptions","Promise","all","entries","key","addFormValue","isArray","some","k","TypeError","append","file","Array"],"sources":["/home/zain/HTN2023/node_modules/openai/src/uploads.ts"],"sourcesContent":["import { type RequestOptions } from './core.js';\nimport { type Readable } from './_shims/node-readable.js';\nimport { type BodyInit } from './_shims/fetch.js';\nimport { FormData, File, type Blob, type FilePropertyBag } from './_shims/form-data.js';\nimport { getMultipartRequestOptions } from './_shims/getMultipartRequestOptions.js';\nimport { fileFromPath } from './_shims/fileFromPath.js';\nimport { type FsReadStream, isFsReadStream } from './_shims/node-readable.js';\n\nexport { fileFromPath };\n\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\n\n/**\n * Typically, this is a native \"File\" class.\n *\n * We provide the {@link toFile} utility to convert a variety of objects\n * into the File class.\n *\n * For convenience, you can also pass a fetch Response, or in Node,\n * the result of fs.createReadStream().\n */\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\n\n/**\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\n */\nexport interface BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\n  readonly size: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\n  readonly type: string;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\n  text(): Promise<string>;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\n  slice(start?: number, end?: number): BlobLike;\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\n}\n\n/**\n * Intended to match web.File, node.File, node-fetch.File, etc.\n */\nexport interface FileLike extends BlobLike {\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\n  readonly lastModified: number;\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\n  readonly name: string;\n}\n\n/**\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\n */\nexport interface ResponseLike {\n  url: string;\n  blob(): Promise<BlobLike>;\n}\n\nexport const isResponseLike = (value: any): value is ResponseLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.url === 'string' &&\n  typeof value.blob === 'function';\n\nexport const isFileLike = (value: any): value is FileLike =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.name === 'string' &&\n  typeof value.lastModified === 'number' &&\n  isBlobLike(value);\n\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\n  value != null &&\n  typeof value === 'object' &&\n  typeof value.size === 'number' &&\n  typeof value.type === 'string' &&\n  typeof value.text === 'function' &&\n  typeof value.slice === 'function' &&\n  typeof value.arrayBuffer === 'function';\n\nexport const isUploadable = (value: any): value is Uploadable => {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\n\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(\n  value: ToFileInput | PromiseLike<ToFileInput>,\n  name?: string | null | undefined,\n  options: FilePropertyBag | undefined = {},\n): Promise<FileLike> {\n  // If it's a promise, resolve it.\n  value = await value;\n\n  if (isResponseLike(value)) {\n    const blob = await value.blob();\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\n\n    return new File([blob as any], name, options);\n  }\n\n  const bits = await getBytes(value);\n\n  name ||= getName(value) ?? 'unknown_file';\n\n  if (!options.type) {\n    const type = (bits[0] as any)?.type;\n    if (typeof type === 'string') {\n      options = { ...options, type };\n    }\n  }\n\n  return new File(bits, name, options);\n}\n\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\n  let parts: Array<BlobPart> = [];\n  if (\n    typeof value === 'string' ||\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer\n  ) {\n    parts.push(value);\n  } else if (isBlobLike(value)) {\n    parts.push(await value.arrayBuffer());\n  } else if (\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n  ) {\n    for await (const chunk of value) {\n      parts.push(chunk as BlobPart); // TODO, consider validating?\n    }\n  } else {\n    throw new Error(\n      `Unexpected data type: ${typeof value}; constructor: ${\n        value?.constructor?.name\n      }; props: ${propsForError(value)}`,\n    );\n  }\n\n  return parts;\n}\n\nfunction propsForError(value: any): string {\n  const props = Object.getOwnPropertyNames(value);\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n\nfunction getName(value: any): string | undefined {\n  return (\n    getStringFromMaybeBuffer(value.name) ||\n    getStringFromMaybeBuffer(value.filename) ||\n    // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\n  );\n}\n\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\n\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n\nexport class MultipartBody {\n  constructor(public body: Readable | BodyInit) {}\n  get [Symbol.toStringTag](): string {\n    return 'MultipartBody';\n  }\n}\n\nexport const isMultipartBody = (body: any): body is MultipartBody =>\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async <T extends {} = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  if (!hasUploadableValue(opts.body)) return opts;\n\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const multipartFormRequestOptions = async <T extends {} = Record<string, unknown>>(\n  opts: RequestOptions<T>,\n): Promise<RequestOptions<T | MultipartBody>> => {\n  const form = await createForm(opts.body);\n  return getMultipartRequestOptions(form, opts);\n};\n\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n\nconst hasUploadableValue = (value: unknown): boolean => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue((value as any)[k])) return true;\n    }\n  }\n  return false;\n};\n\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\n    );\n  }\n\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (isUploadable(value)) {\n    const file = await toFile(value);\n    form.append(key, file as File);\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\n    );\n  } else {\n    throw new TypeError(\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}