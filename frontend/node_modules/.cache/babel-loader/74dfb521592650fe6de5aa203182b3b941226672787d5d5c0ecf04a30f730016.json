{"ast":null,"code":"var _jsxFileName = \"/home/zain/HTN2023/src/components/Layouts/DocUrCodeLayout/DocUrCodeLayout.tsx\",\n  _s = $RefreshSig$();\nimport './DocUrCodeLayout.css';\nimport { PanelGroup } from 'react-resizable-panels';\nimport DocBlock from \"../../Blocks/DocBlock/DocBlock\";\nimport ResizeHandle from '../../Atoms/ResizeHandle/ResizeHandle';\nimport { useState } from 'react';\nimport CodeBlock from '../../Blocks/CodeBlock/CodeBlock';\nimport { DEFAULT_DOCS } from './Constants';\nimport FormBlock from '../../Blocks/FormBlock/FormBlock';\nimport { createExplainationOpenAi } from '../../../utils/api/openAi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DocurCodeLayout = () => {\n  _s();\n  const [selectedLines, setSelectedLines] = useState();\n  const [apiKey, setApiKey] = useState();\n  const [inputCode, setInputCode] = useState();\n  const [language, setLanguage] = useState();\n  const [showForm, setShowForm] = useState(true);\n  const [docs, setDocs] = useState();\n  const onSubmitForm = () => {\n    if (!language || !inputCode || !apiKey) {\n      return;\n    }\n    const getData = async () => {\n      const data = await createExplainationOpenAi(inputCode, apiKey);\n      setDocs(data);\n    };\n    getData();\n    setShowForm(false);\n  };\n  const docItems = (docs !== null && docs !== void 0 ? docs : DEFAULT_DOCS).map(docInfo => {\n    return {\n      onClick: () => setSelectedLines(`${docInfo.start}-${docInfo.end}`),\n      onExit: () => setSelectedLines(undefined),\n      docInfo\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: showForm ? /*#__PURE__*/_jsxDEV(FormBlock, {\n      setInputCode: setInputCode,\n      setApiKey: setApiKey,\n      setSelectedLanguage: setLanguage,\n      onSubmit: onSubmitForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(PanelGroup, {\n      direction: \"horizontal\",\n      className: \"docUrCodeLayout\",\n      children: [/*#__PURE__*/_jsxDEV(DocBlock, {\n        docItems: docItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResizeHandle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n        text: inputCode,\n        selectedLines: selectedLines\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(DocurCodeLayout, \"Sj8tW0QXnAZIfhnTLIrJ9RTQncU=\");\n_c = DocurCodeLayout;\nexport default DocurCodeLayout;\nvar _c;\n$RefreshReg$(_c, \"DocurCodeLayout\");","map":{"version":3,"names":["PanelGroup","DocBlock","ResizeHandle","useState","CodeBlock","DEFAULT_DOCS","FormBlock","createExplainationOpenAi","jsxDEV","_jsxDEV","DocurCodeLayout","_s","selectedLines","setSelectedLines","apiKey","setApiKey","inputCode","setInputCode","language","setLanguage","showForm","setShowForm","docs","setDocs","onSubmitForm","getData","data","docItems","map","docInfo","onClick","start","end","onExit","undefined","className","children","setSelectedLanguage","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","direction","text","_c","$RefreshReg$"],"sources":["/home/zain/HTN2023/src/components/Layouts/DocUrCodeLayout/DocUrCodeLayout.tsx"],"sourcesContent":["import './DocUrCodeLayout.css';\nimport { PanelGroup } from 'react-resizable-panels';\nimport DocBlock from \"../../Blocks/DocBlock/DocBlock\";\nimport ResizeHandle from '../../Atoms/ResizeHandle/ResizeHandle';\nimport { useEffect, useState } from 'react';\nimport CodeBlock from '../../Blocks/CodeBlock/CodeBlock';\nimport { DocItemProps } from '../../Organisms/DocItem/DocItem';\nimport { DEFAULT_DOCS } from './Constants';\nimport FormBlock from '../../Blocks/FormBlock/FormBlock';\nimport { createExplainationOpenAi } from '../../../utils/api/openAi';\nimport { Doc } from '../../../utils/parsers/parser';\n\nconst DocurCodeLayout: React.FC = () => {\n  const [selectedLines, setSelectedLines] = useState<string>();\n  const [apiKey, setApiKey] = useState<string>();\n  const [inputCode, setInputCode] = useState<string>();\n  const [language, setLanguage] = useState<string>();\n  const [showForm, setShowForm] = useState<boolean>(true);\n  const [docs, setDocs] = useState<Doc[]>();\n  const onSubmitForm = () => {\n    if (!language || !inputCode || !apiKey) {\n      return;\n    }\n    const getData = async () => {\n      const data = await createExplainationOpenAi(inputCode, apiKey);\n      setDocs(data);\n    };\n    getData();\n    setShowForm(false);\n  }\n\n  const docItems: DocItemProps[] = (docs ?? DEFAULT_DOCS).map((docInfo) => {\n    return {\n      onClick: () => setSelectedLines(`${docInfo.start}-${docInfo.end}`),\n      onExit: () => setSelectedLines(undefined),\n      docInfo,\n    };\n  });\n\n  return (\n    <div className=\"App\">\n      {showForm ? <FormBlock\n        setInputCode={setInputCode}\n        setApiKey={setApiKey}\n        setSelectedLanguage={setLanguage}\n        onSubmit={onSubmitForm}\n      /> :\n      <PanelGroup direction=\"horizontal\" className=\"docUrCodeLayout\">\n        <DocBlock docItems={docItems}/>\n        <ResizeHandle />\n        <CodeBlock text={inputCode} selectedLines={selectedLines}/>\n      </PanelGroup>\n      }\n    </div>\n  );\n};\n\n\nexport default DocurCodeLayout;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}