{"ast":null,"code":"export const DEFAULT_DOCS = [{\n  start: 2,\n  end: 8,\n  body: \"The twoSum method begins by creating an empty hashmap on line 3.\"\n}, {\n  start: 4,\n  end: 8,\n  body: \"The method then iterates over each element i in the input list nums using a for loop on line 4.\"\n}, {\n  start: 5,\n  end: 5,\n  body: \"For each element, it calculates the complement (the difference between the target and the current element) and stores it in the complement variable on line 5.\"\n}, {\n  start: 6,\n  end: 6,\n  body: \"It checks if the complement exists in the hashmap by using the in operator on line 6. If it does exist, it means a pair of numbers are found that add up to the target.\"\n}, {\n  start: 7,\n  end: 7,\n  body: \"In that case, the method returns a list containing the current index (i) and the index of the complement that was found in the hashmap (hashmap[complement]).\"\n}, {\n  start: 8,\n  end: 8,\n  body: \"If the complement is not in the hashmap, it means no pair of numbers have been found yet that add up to the target. So it adds the current element nums[i] as a key to the hashmap and the current index i as its value on line 8. This allows the code to keep track of previously encountered numbers for future iterations.\"\n}];","map":{"version":3,"names":["DEFAULT_DOCS","start","end","body"],"sources":["/home/zain/HTN2023/src/components/Layouts/DocUrCodeLayout/Constants.ts"],"sourcesContent":["import { Doc } from \"../../../utils/parsers/parser\";\n\nexport const DEFAULT_DOCS: Doc[] = [\n  {\n    start: 2,\n    end: 8,\n    body: \"The twoSum method begins by creating an empty hashmap on line 3.\",\n  },\n  {\n    start: 4,\n    end: 8,\n    body: \"The method then iterates over each element i in the input list nums using a for loop on line 4.\",\n  },\n  {\n    start: 5,\n    end: 5,\n    body: \"For each element, it calculates the complement (the difference between the target and the current element) and stores it in the complement variable on line 5.\",\n  },\n  {\n    start: 6,\n    end: 6,\n    body: \"It checks if the complement exists in the hashmap by using the in operator on line 6. If it does exist, it means a pair of numbers are found that add up to the target.\",\n  },\n  {\n    start: 7,\n    end: 7,\n    body: \"In that case, the method returns a list containing the current index (i) and the index of the complement that was found in the hashmap (hashmap[complement]).\",\n  },\n  {\n    start: 8,\n    end: 8,\n    body: \"If the complement is not in the hashmap, it means no pair of numbers have been found yet that add up to the target. So it adds the current element nums[i] as a key to the hashmap and the current index i as its value on line 8. This allows the code to keep track of previously encountered numbers for future iterations.\",\n  },\n];"],"mappings":"AAEA,OAAO,MAAMA,YAAmB,GAAG,CACjC;EACEC,KAAK,EAAE,CAAC;EACRC,GAAG,EAAE,CAAC;EACNC,IAAI,EAAE;AACR,CAAC,EACD;EACEF,KAAK,EAAE,CAAC;EACRC,GAAG,EAAE,CAAC;EACNC,IAAI,EAAE;AACR,CAAC,EACD;EACEF,KAAK,EAAE,CAAC;EACRC,GAAG,EAAE,CAAC;EACNC,IAAI,EAAE;AACR,CAAC,EACD;EACEF,KAAK,EAAE,CAAC;EACRC,GAAG,EAAE,CAAC;EACNC,IAAI,EAAE;AACR,CAAC,EACD;EACEF,KAAK,EAAE,CAAC;EACRC,GAAG,EAAE,CAAC;EACNC,IAAI,EAAE;AACR,CAAC,EACD;EACEF,KAAK,EAAE,CAAC;EACRC,GAAG,EAAE,CAAC;EACNC,IAAI,EAAE;AACR,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}