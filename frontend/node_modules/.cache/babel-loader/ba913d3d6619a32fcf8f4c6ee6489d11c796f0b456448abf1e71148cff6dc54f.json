{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === 'm') throw new TypeError('Private method is not writable');\n  if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');\n  if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver)) throw new TypeError('Cannot write private member to an object whose class did not declare it');\n  return kind === 'a' ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');\n  if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver)) throw new TypeError('Cannot read private member from an object whose class did not declare it');\n  return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\nimport { VERSION } from './version.mjs';\nimport { Stream } from './streaming.mjs';\nimport { APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError } from './error.mjs';\nimport { getDefaultAgent } from 'openai/_shims/agent';\nimport { fetch, isPolyfilled as fetchIsPolyfilled } from 'openai/_shims/fetch';\nimport { isMultipartBody } from './uploads.mjs';\nexport { maybeMultipartFormRequestOptions, multipartFormRequestOptions, createForm } from './uploads.mjs';\nconst MAX_RETRIES = 2;\nasync function defaultParseResponse(props) {\n  const {\n    response\n  } = props;\n  if (props.options.stream) {\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n    return new Stream(response, props.controller);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType === null || contentType === void 0 ? void 0 : contentType.includes('application/json')) {\n    const json = await response.json();\n    debug('response', response.status, response.url, response.headers, json);\n    return json;\n  }\n  // TODO handle blob, arraybuffer, other content types, etc.\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n  return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise extends Promise {\n  constructor(responsePromise, parseResponse = defaultParseResponse) {\n    super(resolve => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null);\n    });\n    this.responsePromise = responsePromise;\n    this.parseResponse = parseResponse;\n  }\n  _thenUnwrap(transform) {\n    return new APIPromise(this.responsePromise, async props => transform(await this.parseResponse(props)));\n  }\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */\n  asResponse() {\n    return this.responsePromise.then(p => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */\n  async withResponse() {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return {\n      data,\n      response\n    };\n  }\n  parse() {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n  then(onfulfilled, onrejected) {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n  catch(onrejected) {\n    return this.parse().catch(onrejected);\n  }\n  finally(onfinally) {\n    return this.parse().finally(onfinally);\n  }\n}\nexport class APIClient {\n  constructor({\n    baseURL,\n    maxRetries,\n    timeout = 600000,\n    // 10 minutes\n    httpAgent,\n    fetch: overridenFetch\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries !== null && maxRetries !== void 0 ? maxRetries : MAX_RETRIES);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n    this.fetch = overridenFetch !== null && overridenFetch !== void 0 ? overridenFetch : fetch;\n  }\n  authHeaders(opts) {\n    return {};\n  }\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  defaultHeaders(opts) {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts)\n    };\n  }\n  /**\n   * Override this to add your own headers validation:\n   */\n  validateHeaders(headers, customHeaders) {}\n  defaultIdempotencyKey() {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n  get(path, opts) {\n    return this.methodRequest('get', path, opts);\n  }\n  post(path, opts) {\n    return this.methodRequest('post', path, opts);\n  }\n  patch(path, opts) {\n    return this.methodRequest('patch', path, opts);\n  }\n  put(path, opts) {\n    return this.methodRequest('put', path, opts);\n  }\n  delete(path, opts) {\n    return this.methodRequest('delete', path, opts);\n  }\n  methodRequest(method, path, opts) {\n    return this.request(Promise.resolve(opts).then(opts => ({\n      method,\n      path,\n      ...opts\n    })));\n  }\n  getAPIList(path, Page, opts) {\n    return this.requestAPIList(Page, {\n      method: 'get',\n      path,\n      ...opts\n    });\n  }\n  calculateContentLength(body) {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n    return null;\n  }\n  buildRequest(options) {\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      method,\n      path,\n      query,\n      headers = {}\n    } = options;\n    const body = isMultipartBody(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n    const contentLength = this.calculateContentLength(body);\n    const url = this.buildURL(path, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : this.timeout;\n    const httpAgent = (_c = (_b = options.httpAgent) !== null && _b !== void 0 ? _b : this.httpAgent) !== null && _c !== void 0 ? _c : getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (typeof ((_d = httpAgent === null || httpAgent === void 0 ? void 0 : httpAgent.options) === null || _d === void 0 ? void 0 : _d.timeout) === 'number' && minAgentTimeout > ((_e = httpAgent.options.timeout) !== null && _e !== void 0 ? _e : 0)) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      httpAgent.options.timeout = minAgentTimeout;\n    }\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n    const reqHeaders = {\n      ...(contentLength && {\n        'Content-Length': contentLength\n      }),\n      ...this.defaultHeaders(options),\n      ...headers\n    };\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && !fetchIsPolyfilled) {\n      delete reqHeaders['Content-Type'];\n    }\n    // Strip any headers being explicitly omitted with null\n    Object.keys(reqHeaders).forEach(key => reqHeaders[key] === null && delete reqHeaders[key]);\n    const req = {\n      method,\n      ...(body && {\n        body: body\n      }),\n      headers: reqHeaders,\n      ...(httpAgent && {\n        agent: httpAgent\n      }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: (_f = options.signal) !== null && _f !== void 0 ? _f : null\n    };\n    this.validateHeaders(reqHeaders, headers);\n    return {\n      req,\n      url,\n      timeout\n    };\n  }\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  async prepareRequest(request, {\n    url,\n    options\n  }) {}\n  parseHeaders(headers) {\n    return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map(header => [...header])) : {\n      ...headers\n    };\n  }\n  makeStatusError(status, error, message, headers) {\n    return APIError.generate(status, error, message, headers);\n  }\n  request(options, remainingRetries = null) {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n  async makeRequest(optionsInput, retriesRemaining) {\n    var _a, _b, _c;\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : this.maxRetries;\n    }\n    const {\n      req,\n      url,\n      timeout\n    } = this.buildRequest(options);\n    await this.prepareRequest(req, {\n      url,\n      options\n    });\n    debug('request', url, options, req.headers);\n    if ((_b = options.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n      throw new APIUserAbortError();\n    }\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n    if (response instanceof Error) {\n      if ((_c = options.signal) === null || _c === void 0 ? void 0 : _c.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({\n        cause: response\n      });\n    }\n    const responseHeaders = createResponseHeaders(response.headers);\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n      const errText = await response.text().catch(() => 'Unknown');\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n      debug('response', response.status, url, responseHeaders, errMessage);\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n    return {\n      response,\n      options,\n      controller\n    };\n  }\n  requestAPIList(Page, options) {\n    const request = this.makeRequest(options, null);\n    return new PagePromise(this, request, Page);\n  }\n  buildURL(path, query) {\n    const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = {\n        ...defaultQuery,\n        ...query\n      };\n    }\n    if (query) {\n      url.search = this.stringifyQuery(query);\n    }\n    return url.toString();\n  }\n  stringifyQuery(query) {\n    return Object.entries(query).filter(([_, value]) => typeof value !== 'undefined').map(([key, value]) => {\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n      }\n      if (value === null) {\n        return `${encodeURIComponent(key)}=`;\n      }\n      throw new Error(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n    }).join('&');\n  }\n  async fetchWithTimeout(url, init, ms, controller) {\n    const {\n      signal,\n      ...options\n    } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n    const timeout = setTimeout(() => controller.abort(), ms);\n    return this.getRequestClient().fetch(url, {\n      signal: controller.signal,\n      ...options\n    }).finally(() => {\n      clearTimeout(timeout);\n    });\n  }\n  getRequestClient() {\n    return {\n      fetch: this.fetch\n    };\n  }\n  shouldRetry(response) {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n    return false;\n  }\n  async retryRequest(options, retriesRemaining, responseHeaders) {\n    var _a;\n    retriesRemaining -= 1;\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    //\n    // TODO: we may want to handle the case where the header is using the http-date syntax: \"Retry-After: <http-date>\".\n    // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax for details.\n    const retryAfter = parseInt((responseHeaders === null || responseHeaders === void 0 ? void 0 : responseHeaders['retry-after']) || '');\n    const maxRetries = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : this.maxRetries;\n    const timeout = this.calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) * 1000;\n    await sleep(timeout);\n    return this.makeRequest(options, retriesRemaining);\n  }\n  calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 2;\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says.\n    if (Number.isInteger(retryAfter) && retryAfter <= 60) {\n      return retryAfter;\n    }\n    const numRetries = maxRetries - retriesRemaining;\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(numRetries - 1, 2), maxRetryDelay);\n    // Apply some jitter, plus-or-minus half a second.\n    const jitter = Math.random() - 0.5;\n    return sleepSeconds + jitter;\n  }\n  getUserAgent() {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\nexport class APIResource {\n  constructor(client) {\n    this.client = client;\n    this.get = client.get.bind(client);\n    this.post = client.post.bind(client);\n    this.patch = client.patch.bind(client);\n    this.put = client.put.bind(client);\n    this.delete = client.delete.bind(client);\n    this.getAPIList = client.getAPIList.bind(client);\n  }\n}\nexport class AbstractPage {\n  constructor(client, response, body, options) {\n    _AbstractPage_client.set(this, void 0);\n    __classPrivateFieldSet(this, _AbstractPage_client, client, 'f');\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n  hasNextPage() {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n  async getNextPage() {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new Error('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n    }\n    const nextOptions = {\n      ...this.options\n    };\n    if ('params' in nextInfo) {\n      nextOptions.query = {\n        ...nextOptions.query,\n        ...nextInfo.params\n      };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await __classPrivateFieldGet(this, _AbstractPage_client, 'f').requestAPIList(this.constructor, nextOptions);\n  }\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n  async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise extends APIPromise {\n  constructor(client, request, Page) {\n    super(request, async props => new Page(client, props.response, await defaultParseResponse(props), props.options));\n  }\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\nexport const createResponseHeaders = headers => {\n  return new Proxy(Object.fromEntries(\n  // @ts-ignore\n  headers.entries()), {\n    get(target, name) {\n      const key = name.toString();\n      return target[key.toLowerCase()] || target[key];\n    }\n  });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true\n};\nexport const isRequestOptions = obj => {\n  return typeof obj === 'object' && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every(k => hasOwn(requestOptionsKeys, k));\n};\nconst getPlatformProperties = () => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version\n    };\n  }\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version\n    };\n  }\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown'\n  };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n  // NOTE: The order matters here!\n  const browserPatterns = [{\n    key: 'edge',\n    pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'chrome',\n    pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'firefox',\n    pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'safari',\n    pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n  }];\n  // Find the FIRST matching browser\n  for (const {\n    key,\n    pattern\n  } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n      return {\n        browser: key,\n        version: `${major}.${minor}.${patch}`\n      };\n    }\n  }\n  return null;\n}\nconst normalizeArch = arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\nconst normalizePlatform = platform => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n  platform = platform.toLowerCase();\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\nlet _platformHeaders;\nconst getPlatformHeaders = () => {\n  return _platformHeaders !== null && _platformHeaders !== void 0 ? _platformHeaders : _platformHeaders = getPlatformProperties();\n};\nexport const safeJSON = text => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = url => {\n  return startsWithSchemeRegexp.test(url);\n};\nexport const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n) => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new Error(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new Error(`${name} must be a positive integer`);\n  }\n  return n;\n};\nexport const castToError = err => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\nexport const ensurePresent = value => {\n  if (value == null) throw new Error(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = env => {\n  var _a, _b, _c, _d;\n  if (typeof process !== 'undefined') {\n    return (_b = (_a = process.env) === null || _a === void 0 ? void 0 : _a[env]) !== null && _b !== void 0 ? _b : undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return (_d = (_c = Deno.env) === null || _c === void 0 ? void 0 : _c.get) === null || _d === void 0 ? void 0 : _d.call(_c, env);\n  }\n  return undefined;\n};\nexport const coerceInteger = value => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceFloat = value => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceBoolean = value => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\nexport const maybeCoerceInteger = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\nexport const maybeCoerceFloat = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\nexport const maybeCoerceBoolean = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj) {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function debug(action, ...args) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`OpenAI:DEBUG:${action}`, ...args);\n  }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\nexport const isHeadersProtocol = headers => {\n  return typeof (headers === null || headers === void 0 ? void 0 : headers.get) === 'function';\n};\nexport const getHeader = (headers, key) => {\n  const lowerKey = key.toLowerCase();\n  if (isHeadersProtocol(headers)) return headers.get(key) || headers.get(lowerKey);\n  const value = headers[key] || headers[lowerKey];\n  if (Array.isArray(value)) {\n    if (value.length <= 1) return value[0];\n    console.warn(`Received ${value.length} entries for the ${key} header, using the first entry.`);\n    return value[0];\n  }\n  return value;\n};\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = str => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n  throw new Error('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","_AbstractPage_client","VERSION","Stream","APIError","APIConnectionError","APIConnectionTimeoutError","APIUserAbortError","getDefaultAgent","fetch","isPolyfilled","fetchIsPolyfilled","isMultipartBody","maybeMultipartFormRequestOptions","multipartFormRequestOptions","createForm","MAX_RETRIES","defaultParseResponse","props","response","options","stream","controller","contentType","headers","includes","json","status","url","text","responsePromise","asResponse","then","p","withResponse","data","Promise","all","parse","parsedPromise","parseResponse","onrejected","onfulfilled","catch","finally","onfinally","timeout","baseURL","validatePositiveInteger","maxRetries","overridenFetch","authHeaders","opts","defaultHeaders","getUserAgent","getPlatformHeaders","validateHeaders","customHeaders","defaultIdempotencyKey","uuid4","methodRequest","path","put","delete","method","request","resolve","getAPIList","Page","requestAPIList","calculateContentLength","body","Buffer","byteLength","toString","TextEncoder","encoder","encoded","encode","length","buildRequest","_b","_c","_d","_e","_f","query","JSON","stringify","contentLength","buildURL","_a","httpAgent","minAgentTimeout","idempotencyHeader","idempotencyKey","reqHeaders","forEach","key","req","agent","signal","prepareRequest","parseHeaders","Symbol","iterator","Object","fromEntries","Array","from","map","header","makeStatusError","error","message","generate","remainingRetries","APIPromise","makeRequest","optionsInput","retriesRemaining","aborted","AbortController","fetchWithTimeout","castToError","Error","retryRequest","name","cause","createResponseHeaders","ok","shouldRetry","responseHeaders","errText","safeJSON","errMessage","errJSON","undefined","debug","err","PagePromise","URL","endsWith","startsWith","slice","defaultQuery","isEmptyObj","search","stringifyQuery","entries","_","encodeURIComponent","init","ms","addEventListener","abort","setTimeout","getRequestClient","clearTimeout","shouldRetryHeader","retryAfter","parseInt","calculateRetryTimeoutSeconds","sleep","initialRetryDelay","maxRetryDelay","isInteger","numRetries","sleepSeconds","Math","min","pow","jitter","random","constructor","APIResource","client","bind","post","patch","AbstractPage","set","hasNextPage","getPaginatedItems","nextPageInfo","getNextPage","nextInfo","nextOptions","params","searchParams","iterPages","page","WeakMap","asyncIterator","item","Proxy","target","toLowerCase","isRequestOptions","obj","keys","every","k","hasOwn","requestOptionsKeys","getPlatformProperties","Deno","build","normalizePlatform","os","normalizeArch","arch","version","EdgeRuntime","process","prototype","platform","browserInfo","getBrowserInfo","browser","navigator","browserPatterns","pattern","match","exec","userAgent","major","minor","_platformHeaders","startsWithSchemeRegexp","RegExp","isAbsoluteURL","test","n","Number","ensurePresent","readEnv","env","coerceInteger","round","coerceFloat","parseFloat","coerceBoolean","Boolean","maybeCoerceInteger","maybeCoerceFloat","maybeCoerceBoolean","_k","hasOwnProperty","action","args","console","log","replace","c","r","v","isRunningInBrowser","window","document"],"sources":["/home/zain/HTN2023/node_modules/openai/src/core.ts"],"sourcesContent":["import { VERSION } from './version.js';\nimport { Stream } from './streaming.js';\nimport { APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError } from './error.js';\nimport type { Readable } from './_shims/node-readable.js';\nimport { getDefaultAgent, type Agent } from './_shims/agent.js';\nimport {\n  fetch,\n  isPolyfilled as fetchIsPolyfilled,\n  type RequestInfo,\n  type RequestInit,\n  type Response,\n  type HeadersInit,\n} from './_shims/fetch.js';\nexport { type Response };\nimport { isMultipartBody } from './uploads.js';\nexport {\n  maybeMultipartFormRequestOptions,\n  multipartFormRequestOptions,\n  createForm,\n  type Uploadable,\n} from './uploads.js';\n\nconst MAX_RETRIES = 2;\n\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\ntype APIResponseProps = {\n  response: Response;\n  options: FinalRequestOptions;\n  controller: AbortController;\n};\n\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<T> {\n  const { response } = props;\n  if (props.options.stream) {\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n    return new Stream(response, props.controller) as any;\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (contentType?.includes('application/json')) {\n    const json = await response.json();\n\n    debug('response', response.status, response.url, response.headers, json);\n\n    return json as T;\n  }\n\n  // TODO handle blob, arraybuffer, other content types, etc.\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n  return text as any as T;\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<T> {\n  private parsedPromise: Promise<T> | undefined;\n\n  constructor(\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (props: APIResponseProps) => PromiseOrValue<T> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  _thenUnwrap<U>(transform: (data: T) => U): APIPromise<U> {\n    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport abstract class APIClient {\n  baseURL: string;\n  maxRetries: number;\n  timeout: number;\n  httpAgent: Agent | undefined;\n\n  private fetch: Fetch;\n  protected idempotencyHeader?: string;\n\n  constructor({\n    baseURL,\n    maxRetries,\n    timeout = 600000, // 10 minutes\n    httpAgent,\n    fetch: overridenFetch,\n  }: {\n    baseURL: string;\n    maxRetries?: number | undefined;\n    timeout: number | undefined;\n    httpAgent: Agent | undefined;\n    fetch: Fetch | undefined;\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries ?? MAX_RETRIES);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n\n    this.fetch = overridenFetch ?? fetch;\n  }\n\n  protected authHeaders(opts: FinalRequestOptions): Headers {\n    return {};\n  }\n\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts),\n    };\n  }\n\n  protected abstract defaultQuery(): DefaultQuery | undefined;\n\n  /**\n   * Override this to add your own headers validation:\n   */\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\n\n  protected defaultIdempotencyKey(): string {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n\n  get<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('get', path, opts);\n  }\n\n  post<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('post', path, opts);\n  }\n\n  patch<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('patch', path, opts);\n  }\n\n  put<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('put', path, opts);\n  }\n\n  delete<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('delete', path, opts);\n  }\n\n  private methodRequest<Req extends {}, Rsp>(\n    method: HTTPMethod,\n    path: string,\n    opts?: PromiseOrValue<RequestOptions<Req>>,\n  ): APIPromise<Rsp> {\n    return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n  }\n\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    path: string,\n    Page: new (...args: any[]) => PageClass,\n    opts?: RequestOptions<any>,\n  ): PagePromise<PageClass, Item> {\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\n  }\n\n  private calculateContentLength(body: unknown): string | null {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n\n    return null;\n  }\n\n  buildRequest<Req extends {}>(\n    options: FinalRequestOptions<Req>,\n  ): { req: RequestInit; url: string; timeout: number } {\n    const { method, path, query, headers: headers = {} } = options;\n\n    const body =\n      isMultipartBody(options.body) ? options.body.body\n      : options.body ? JSON.stringify(options.body, null, 2)\n      : null;\n    const contentLength = this.calculateContentLength(body);\n\n    const url = this.buildURL(path!, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\n    ) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      (httpAgent as any).options.timeout = minAgentTimeout;\n    }\n\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n\n    const reqHeaders: Record<string, string> = {\n      ...(contentLength && { 'Content-Length': contentLength }),\n      ...this.defaultHeaders(options),\n      ...headers,\n    };\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && !fetchIsPolyfilled) {\n      delete reqHeaders['Content-Type'];\n    }\n\n    // Strip any headers being explicitly omitted with null\n    Object.keys(reqHeaders).forEach((key) => reqHeaders[key] === null && delete reqHeaders[key]);\n\n    const req: RequestInit = {\n      method,\n      ...(body && { body: body as any }),\n      headers: reqHeaders,\n      ...(httpAgent && { agent: httpAgent }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null,\n    };\n\n    this.validateHeaders(reqHeaders, headers);\n\n    return { req, url, timeout };\n  }\n\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  protected async prepareRequest(\n    request: RequestInit,\n    { url, options }: { url: string; options: FinalRequestOptions },\n  ): Promise<void> {}\n\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\n    return (\n      !headers ? {}\n      : Symbol.iterator in headers ?\n        Object.fromEntries(Array.from(headers as Iterable<string[]>).map((header) => [...header]))\n      : { ...headers }\n    );\n  }\n\n  protected makeStatusError(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    return APIError.generate(status, error, message, headers);\n  }\n\n  request<Req extends {}, Rsp>(\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\n    remainingRetries: number | null = null,\n  ): APIPromise<Rsp> {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n\n  private async makeRequest(\n    optionsInput: PromiseOrValue<FinalRequestOptions>,\n    retriesRemaining: number | null,\n  ): Promise<APIResponseProps> {\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = options.maxRetries ?? this.maxRetries;\n    }\n\n    const { req, url, timeout } = this.buildRequest(options);\n\n    await this.prepareRequest(req, { url, options });\n\n    debug('request', url, options, req.headers);\n\n    if (options.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({ cause: response });\n    }\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n\n      const errText = await response.text().catch(() => 'Unknown');\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n\n      debug('response', response.status, url, responseHeaders, errMessage);\n\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n\n    return { response, options, controller };\n  }\n\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n    options: FinalRequestOptions,\n  ): PagePromise<PageClass, Item> {\n    const request = this.makeRequest(options, null);\n    return new PagePromise<PageClass, Item>(this, request, Page);\n  }\n\n  buildURL<Req extends Record<string, unknown>>(path: string, query: Req | null | undefined): string {\n    const url =\n      isAbsoluteURL(path) ?\n        new URL(path)\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = { ...defaultQuery, ...query } as Req;\n    }\n\n    if (query) {\n      url.search = this.stringifyQuery(query);\n    }\n\n    return url.toString();\n  }\n\n  protected stringifyQuery(query: Record<string, unknown>): string {\n    return Object.entries(query)\n      .filter(([_, value]) => typeof value !== 'undefined')\n      .map(([key, value]) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        }\n        if (value === null) {\n          return `${encodeURIComponent(key)}=`;\n        }\n        throw new Error(\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\n        );\n      })\n      .join('&');\n  }\n\n  async fetchWithTimeout(\n    url: RequestInfo,\n    init: RequestInit | undefined,\n    ms: number,\n    controller: AbortController,\n  ): Promise<Response> {\n    const { signal, ...options } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n\n    const timeout = setTimeout(() => controller.abort(), ms);\n\n    return this.getRequestClient()\n      .fetch(url, { signal: controller.signal as any, ...options })\n      .finally(() => {\n        clearTimeout(timeout);\n      });\n  }\n\n  protected getRequestClient(): RequestClient {\n    return { fetch: this.fetch };\n  }\n\n  private shouldRetry(response: Response): boolean {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n\n    return false;\n  }\n\n  private async retryRequest(\n    options: FinalRequestOptions,\n    retriesRemaining: number,\n    responseHeaders?: Headers | undefined,\n  ): Promise<APIResponseProps> {\n    retriesRemaining -= 1;\n\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    //\n    // TODO: we may want to handle the case where the header is using the http-date syntax: \"Retry-After: <http-date>\".\n    // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax for details.\n    const retryAfter = parseInt(responseHeaders?.['retry-after'] || '');\n\n    const maxRetries = options.maxRetries ?? this.maxRetries;\n    const timeout = this.calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) * 1000;\n    await sleep(timeout);\n\n    return this.makeRequest(options, retriesRemaining);\n  }\n\n  private calculateRetryTimeoutSeconds(\n    retriesRemaining: number,\n    retryAfter: number,\n    maxRetries: number,\n  ): number {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 2;\n\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says.\n    if (Number.isInteger(retryAfter) && retryAfter <= 60) {\n      return retryAfter;\n    }\n\n    const numRetries = maxRetries - retriesRemaining;\n\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(numRetries - 1, 2), maxRetryDelay);\n\n    // Apply some jitter, plus-or-minus half a second.\n    const jitter = Math.random() - 0.5;\n\n    return sleepSeconds + jitter;\n  }\n\n  private getUserAgent(): string {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\n\nexport class APIResource {\n  protected client: APIClient;\n  constructor(client: APIClient) {\n    this.client = client;\n\n    this.get = client.get.bind(client);\n    this.post = client.post.bind(client);\n    this.patch = client.patch.bind(client);\n    this.put = client.put.bind(client);\n    this.delete = client.delete.bind(client);\n    this.getAPIList = client.getAPIList.bind(client);\n  }\n\n  protected get: APIClient['get'];\n  protected post: APIClient['post'];\n  protected patch: APIClient['patch'];\n  protected put: APIClient['put'];\n  protected delete: APIClient['delete'];\n  protected getAPIList: APIClient['getAPIList'];\n}\n\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\n\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\n  #client: APIClient;\n  protected options: FinalRequestOptions;\n\n  protected response: Response;\n  protected body: unknown;\n\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\n    this.#client = client;\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n\n  /**\n   * @deprecated Use nextPageInfo instead\n   */\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\n  abstract nextPageInfo(): PageInfo | null;\n\n  abstract getPaginatedItems(): Item[];\n\n  hasNextPage(): boolean {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n\n  async getNextPage(): Promise<this> {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new Error(\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\n      );\n    }\n    const nextOptions = { ...this.options };\n    if ('params' in nextInfo) {\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: AbstractPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise<\n    PageClass extends AbstractPage<Item>,\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\n  >\n  extends APIPromise<PageClass>\n  implements AsyncIterable<Item>\n{\n  constructor(\n    client: APIClient,\n    request: Promise<APIResponseProps>,\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n  ) {\n    super(\n      request,\n      async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options),\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport const createResponseHeaders = (\n  headers: Awaited<ReturnType<Fetch>>['headers'],\n): Record<string, string> => {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries(),\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    },\n  );\n};\n\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\n\nexport type RequestClient = { fetch: Fetch };\nexport type Headers = Record<string, string | null | undefined>;\nexport type DefaultQuery = Record<string, string | undefined>;\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nexport type RequestOptions<Req extends {} = Record<string, unknown> | Readable> = {\n  method?: HTTPMethod;\n  path?: string;\n  query?: Req | undefined;\n  body?: Req | undefined;\n  headers?: Headers | undefined;\n\n  maxRetries?: number;\n  stream?: boolean | undefined;\n  timeout?: number;\n  httpAgent?: Agent;\n  signal?: AbortSignal | undefined | null;\n  idempotencyKey?: string;\n};\n\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions => {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\nexport type FinalRequestOptions<Req extends {} = Record<string, unknown> | Readable> = RequestOptions<Req> & {\n  method: HTTPMethod;\n  path: string;\n};\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version,\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nconst getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n\nexport const safeJSON = (text: string) => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url: string): boolean => {\n  return startsWithSchemeRegexp.test(url);\n};\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validatePositiveInteger = (name: string, n: unknown): number => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new Error(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new Error(`${name} must be a positive integer`);\n  }\n  return n;\n};\n\nexport const castToError = (err: any): Error => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\n\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\n  if (value == null) throw new Error(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env: string): string | undefined => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env] ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env);\n  }\n  return undefined;\n};\n\nexport const coerceInteger = (value: unknown): number => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceFloat = (value: unknown): number => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceBoolean = (value: unknown): boolean => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\n\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\n\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\n\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function debug(action: string, ...args: any[]) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`OpenAI:DEBUG:${action}`, ...args);\n  }\n}\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\nexport interface HeadersProtocol {\n  get: (header: string) => string | null | undefined;\n}\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\n\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\n  return typeof headers?.get === 'function';\n};\n\nexport const getHeader = (headers: HeadersLike, key: string): string | null | undefined => {\n  const lowerKey = key.toLowerCase();\n  if (isHeadersProtocol(headers)) return headers.get(key) || headers.get(lowerKey);\n  const value = headers[key] || headers[lowerKey];\n  if (Array.isArray(value)) {\n    if (value.length <= 1) return value[0];\n    console.warn(`Received ${value.length} entries for the ${key} header, using the first entry.`);\n    return value[0];\n  }\n  return value;\n};\n\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str: string | null | undefined): string => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n\n  throw new Error('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}