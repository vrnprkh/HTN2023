{"ast":null,"code":"export function parseExpl(text) {\n  console.log(text);\n  let regex = /(?=\\([0-9]+-[0-9]+\\))|(?=\\([0-9]+\\))/g;\n  let returnValue = text.split(regex);\n  console.log(returnValue);\n  return returnValue;\n}\nexport function parseCode(input) {\n  const arr = input.split('\\n');\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push({\n      lineNumber: i + 1,\n      code: arr[i]\n    });\n  }\n  return newArr;\n}\nexport function parseArrayToText(arrayCode) {\n  let output = '';\n  for (let i = 0; i < arrayCode.length; i++) {\n    output += String(arrayCode[i].lineNumber) + ' ' + String(arrayCode[i].code) + '\\n';\n  }\n  return output;\n}\nexport function getDocFromOutput(splitOutputData) {\n  const regex = /[0-9]+-[0-9]+/i;\n  const regex2 = /([0-9]+)/;\n  const newArr = [];\n  splitOutputData.forEach(element => {\n    const rangeString = element.match(regex);\n    if (rangeString != null) {\n      const range = rangeString[0].split('-');\n      newArr.push({\n        start: parseInt(range[0]),\n        end: parseInt(range[1]),\n        body: element\n      });\n    } else {\n      let newNumber = element.match(regex2);\n      if (newNumber != null) {\n        let num = parseInt(newNumber[0]);\n        newArr.push({\n          start: num,\n          end: num,\n          body: element\n        });\n      } else {\n        newArr.push({\n          start: 0,\n          end: 0,\n          body: element\n        });\n      }\n    }\n  });\n  return newArr;\n}","map":{"version":3,"names":["parseExpl","text","console","log","regex","returnValue","split","parseCode","input","arr","newArr","i","length","push","lineNumber","code","parseArrayToText","arrayCode","output","String","getDocFromOutput","splitOutputData","regex2","forEach","element","rangeString","match","range","start","parseInt","end","body","newNumber","num"],"sources":["/home/zain/HTN2023/src/utils/parsers/parser.ts"],"sourcesContent":["export type Doc = {\n    start: number;\n    end: number;\n    body: string;\n};\n\nexport type Line = {\n    lineNumber: number;\n    code: string;\n}\n\nexport function parseExpl(text: any) {\n    console.log(text)\n    let regex = /(?=\\([0-9]+-[0-9]+\\))|(?=\\([0-9]+\\))/g;\n    let returnValue = text.split(regex)\n    console.log(returnValue)\n    return returnValue\n}\n\n\nexport function parseCode(input: string) {\n    const arr = input.split('\\n');\n    const newArr: Line[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        newArr.push({\n            lineNumber: i + 1,\n            code: arr[i]\n        });\n    }\n    return newArr\n}\n\nexport function parseArrayToText(arrayCode: Array<Line>) {\n    let output = '';\n    for(let i = 0; i<arrayCode.length; i++){\n        output += String(arrayCode[i].lineNumber) +' '+ String(arrayCode[i].code) + '\\n';\n    }\n    return output;\n  }\n\nexport function getDocFromOutput(splitOutputData: Array<string>) {\n    const regex = /[0-9]+-[0-9]+/i; \n    const regex2 = /([0-9]+)/\n    const newArr: Doc[] = [] \n    splitOutputData.forEach(element => {\n        const rangeString = element.match(regex)\n        if (rangeString != null) {\n            const range = rangeString[0].split('-')\n            newArr.push({\n                start: parseInt(range[0]),\n                end: parseInt(range[1]),\n                body: element\n            })\n        }\n        else {\n            let newNumber = element.match(regex2)\n            if (newNumber != null) {\n                let num = parseInt(newNumber[0])\n                newArr.push({\n                    start: num,\n                    end: num,\n                    body: element\n                })\n            }\n            else {\n                newArr.push({\n                    start: 0,\n                    end: 0,\n                    body: element,\n                })\n            }\n        }\n\n    });\n    return newArr\n}"],"mappings":"AAWA,OAAO,SAASA,SAASA,CAACC,IAAS,EAAE;EACjCC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,IAAIG,KAAK,GAAG,uCAAuC;EACnD,IAAIC,WAAW,GAAGJ,IAAI,CAACK,KAAK,CAACF,KAAK,CAAC;EACnCF,OAAO,CAACC,GAAG,CAACE,WAAW,CAAC;EACxB,OAAOA,WAAW;AACtB;AAGA,OAAO,SAASE,SAASA,CAACC,KAAa,EAAE;EACrC,MAAMC,GAAG,GAAGD,KAAK,CAACF,KAAK,CAAC,IAAI,CAAC;EAC7B,MAAMI,MAAc,GAAG,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACjCD,MAAM,CAACG,IAAI,CAAC;MACRC,UAAU,EAAEH,CAAC,GAAG,CAAC;MACjBI,IAAI,EAAEN,GAAG,CAACE,CAAC;IACf,CAAC,CAAC;EACN;EACA,OAAOD,MAAM;AACjB;AAEA,OAAO,SAASM,gBAAgBA,CAACC,SAAsB,EAAE;EACrD,IAAIC,MAAM,GAAG,EAAE;EACf,KAAI,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACM,SAAS,CAACL,MAAM,EAAED,CAAC,EAAE,EAAC;IACnCO,MAAM,IAAIC,MAAM,CAACF,SAAS,CAACN,CAAC,CAAC,CAACG,UAAU,CAAC,GAAE,GAAG,GAAEK,MAAM,CAACF,SAAS,CAACN,CAAC,CAAC,CAACI,IAAI,CAAC,GAAG,IAAI;EACpF;EACA,OAAOG,MAAM;AACf;AAEF,OAAO,SAASE,gBAAgBA,CAACC,eAA8B,EAAE;EAC7D,MAAMjB,KAAK,GAAG,gBAAgB;EAC9B,MAAMkB,MAAM,GAAG,UAAU;EACzB,MAAMZ,MAAa,GAAG,EAAE;EACxBW,eAAe,CAACE,OAAO,CAACC,OAAO,IAAI;IAC/B,MAAMC,WAAW,GAAGD,OAAO,CAACE,KAAK,CAACtB,KAAK,CAAC;IACxC,IAAIqB,WAAW,IAAI,IAAI,EAAE;MACrB,MAAME,KAAK,GAAGF,WAAW,CAAC,CAAC,CAAC,CAACnB,KAAK,CAAC,GAAG,CAAC;MACvCI,MAAM,CAACG,IAAI,CAAC;QACRe,KAAK,EAAEC,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;QACzBG,GAAG,EAAED,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;QACvBI,IAAI,EAAEP;MACV,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAIQ,SAAS,GAAGR,OAAO,CAACE,KAAK,CAACJ,MAAM,CAAC;MACrC,IAAIU,SAAS,IAAI,IAAI,EAAE;QACnB,IAAIC,GAAG,GAAGJ,QAAQ,CAACG,SAAS,CAAC,CAAC,CAAC,CAAC;QAChCtB,MAAM,CAACG,IAAI,CAAC;UACRe,KAAK,EAAEK,GAAG;UACVH,GAAG,EAAEG,GAAG;UACRF,IAAI,EAAEP;QACV,CAAC,CAAC;MACN,CAAC,MACI;QACDd,MAAM,CAACG,IAAI,CAAC;UACRe,KAAK,EAAE,CAAC;UACRE,GAAG,EAAE,CAAC;UACNC,IAAI,EAAEP;QACV,CAAC,CAAC;MACN;IACJ;EAEJ,CAAC,CAAC;EACF,OAAOd,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}