{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { Page } from 'openai/pagination';\nexport class FineTunes extends APIResource {\n  /**\n   * Creates a job that fine-tunes a specified model from a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n   */\n  create(body, options) {\n    return this.post('/fine-tunes', {\n      body,\n      ...options\n    });\n  }\n  /**\n   * Gets info about the fine-tune job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n   */\n  retrieve(fineTuneId, options) {\n    return this.get(`/fine-tunes/${fineTuneId}`, options);\n  }\n  /**\n   * List your organization's fine-tuning jobs\n   */\n  list(options) {\n    return this.getAPIList('/fine-tunes', FineTunesPage, options);\n  }\n  /**\n   * Immediately cancel a fine-tune job.\n   */\n  cancel(fineTuneId, options) {\n    return this.post(`/fine-tunes/${fineTuneId}/cancel`, options);\n  }\n  listEvents(fineTuneId, query, options) {\n    var _a;\n    return this.get(`/fine-tunes/${fineTuneId}/events`, {\n      query,\n      timeout: 86400000,\n      ...options,\n      stream: (_a = query === null || query === void 0 ? void 0 : query.stream) !== null && _a !== void 0 ? _a : false\n    });\n  }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FineTunesPage extends Page {}\n(function (FineTunes) {})(FineTunes || (FineTunes = {}));","map":{"version":3,"names":["APIResource","Page","FineTunes","create","body","options","post","retrieve","fineTuneId","get","list","getAPIList","FineTunesPage","cancel","listEvents","query","_a","stream"],"sources":["/home/zain/HTN2023/node_modules/openai/src/resources/fine-tunes.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from '../core.js';\nimport { APIPromise } from '../core.js';\nimport { APIResource } from '../resource.js';\nimport * as Files from './files.js';\nimport * as API from './index.js';\nimport { Page } from '../pagination.js';\nimport { Stream } from '../streaming.js';\n\nexport class FineTunes extends APIResource {\n  /**\n   * Creates a job that fine-tunes a specified model from a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n   */\n  create(body: FineTuneCreateParams, options?: Core.RequestOptions): Core.APIPromise<FineTune> {\n    return this.post('/fine-tunes', { body, ...options });\n  }\n\n  /**\n   * Gets info about the fine-tune job.\n   *\n   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n   */\n  retrieve(fineTuneId: string, options?: Core.RequestOptions): Core.APIPromise<FineTune> {\n    return this.get(`/fine-tunes/${fineTuneId}`, options);\n  }\n\n  /**\n   * List your organization's fine-tuning jobs\n   */\n  list(options?: Core.RequestOptions): Core.PagePromise<FineTunesPage, FineTune> {\n    return this.getAPIList('/fine-tunes', FineTunesPage, options);\n  }\n\n  /**\n   * Immediately cancel a fine-tune job.\n   */\n  cancel(fineTuneId: string, options?: Core.RequestOptions): Core.APIPromise<FineTune> {\n    return this.post(`/fine-tunes/${fineTuneId}/cancel`, options);\n  }\n\n  /**\n   * Get fine-grained status updates for a fine-tune job.\n   */\n  listEvents(\n    fineTuneId: string,\n    query?: FineTuneListEventsParamsNonStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<FineTuneEventsListResponse>;\n  listEvents(\n    fineTuneId: string,\n    query: FineTuneListEventsParamsStreaming,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<FineTuneEvent>>;\n  listEvents(\n    fineTuneId: string,\n    query?: FineTuneListEventsParamsBase | undefined,\n    options?: Core.RequestOptions,\n  ): APIPromise<Stream<FineTuneEvent> | FineTuneEventsListResponse>;\n  listEvents(\n    fineTuneId: string,\n    query?: FineTuneListEventsParams | undefined,\n    options?: Core.RequestOptions,\n  ): APIPromise<FineTuneEventsListResponse> | APIPromise<Stream<FineTuneEvent>> {\n    return this.get(`/fine-tunes/${fineTuneId}/events`, {\n      query,\n      timeout: 86400000,\n      ...options,\n      stream: query?.stream ?? false,\n    }) as APIPromise<FineTuneEventsListResponse> | APIPromise<Stream<FineTuneEvent>>;\n  }\n}\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class FineTunesPage extends Page<FineTune> {}\n// alias so we can export it in the namespace\ntype _FineTunesPage = FineTunesPage;\n\n/**\n * The `FineTune` object represents a legacy fine-tune job that has been created\n * through the API.\n */\nexport interface FineTune {\n  /**\n   * The object identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the fine-tuned model that is being created.\n   */\n  fine_tuned_model: string | null;\n\n  /**\n   * The hyperparameters used for the fine-tuning job. See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning/hyperparameters)\n   * for more details.\n   */\n  hyperparams: FineTune.Hyperparams;\n\n  /**\n   * The base model that is being fine-tuned.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always \"fine-tune\".\n   */\n  object: string;\n\n  /**\n   * The organization that owns the fine-tuning job.\n   */\n  organization_id: string;\n\n  /**\n   * The compiled results files for the fine-tuning job.\n   */\n  result_files: Array<Files.FileObject>;\n\n  /**\n   * The current status of the fine-tuning job, which can be either `created`,\n   * `running`, `succeeded`, `failed`, or `cancelled`.\n   */\n  status: string;\n\n  /**\n   * The list of files used for training.\n   */\n  training_files: Array<Files.FileObject>;\n\n  /**\n   * The Unix timestamp (in seconds) for when the fine-tuning job was last updated.\n   */\n  updated_at: number;\n\n  /**\n   * The list of files used for validation.\n   */\n  validation_files: Array<Files.FileObject>;\n\n  /**\n   * The list of events that have been observed in the lifecycle of the FineTune job.\n   */\n  events?: Array<FineTuneEvent>;\n}\n\nexport namespace FineTune {\n  /**\n   * The hyperparameters used for the fine-tuning job. See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning/hyperparameters)\n   * for more details.\n   */\n  export interface Hyperparams {\n    /**\n     * The batch size to use for training. The batch size is the number of training\n     * examples used to train a single forward and backward pass.\n     */\n    batch_size: number;\n\n    /**\n     * The learning rate multiplier to use for training.\n     */\n    learning_rate_multiplier: number;\n\n    /**\n     * The number of epochs to train the model for. An epoch refers to one full cycle\n     * through the training dataset.\n     */\n    n_epochs: number;\n\n    /**\n     * The weight to use for loss on the prompt tokens.\n     */\n    prompt_loss_weight: number;\n\n    /**\n     * The number of classes to use for computing classification metrics.\n     */\n    classification_n_classes?: number;\n\n    /**\n     * The positive class to use for computing classification metrics.\n     */\n    classification_positive_class?: string;\n\n    /**\n     * The classification metrics to compute using the validation dataset at the end of\n     * every epoch.\n     */\n    compute_classification_metrics?: boolean;\n  }\n}\n\nexport interface FineTuneEvent {\n  created_at: number;\n\n  level: string;\n\n  message: string;\n\n  object: string;\n}\n\nexport interface FineTuneEventsListResponse {\n  data: Array<FineTuneEvent>;\n\n  object: string;\n}\n\nexport interface FineTuneCreateParams {\n  /**\n   * The ID of an uploaded file that contains training data.\n   *\n   * See [upload file](https://platform.openai.com/docs/api-reference/files/upload)\n   * for how to upload a file.\n   *\n   * Your dataset must be formatted as a JSONL file, where each training example is a\n   * JSON object with the keys \"prompt\" and \"completion\". Additionally, you must\n   * upload your file with the purpose `fine-tune`.\n   *\n   * See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning/creating-training-data)\n   * for more details.\n   */\n  training_file: string;\n\n  /**\n   * The batch size to use for training. The batch size is the number of training\n   * examples used to train a single forward and backward pass.\n   *\n   * By default, the batch size will be dynamically configured to be ~0.2% of the\n   * number of examples in the training set, capped at 256 - in general, we've found\n   * that larger batch sizes tend to work better for larger datasets.\n   */\n  batch_size?: number | null;\n\n  /**\n   * If this is provided, we calculate F-beta scores at the specified beta values.\n   * The F-beta score is a generalization of F-1 score. This is only used for binary\n   * classification.\n   *\n   * With a beta of 1 (i.e. the F-1 score), precision and recall are given the same\n   * weight. A larger beta score puts more weight on recall and less on precision. A\n   * smaller beta score puts more weight on precision and less on recall.\n   */\n  classification_betas?: Array<number> | null;\n\n  /**\n   * The number of classes in a classification task.\n   *\n   * This parameter is required for multiclass classification.\n   */\n  classification_n_classes?: number | null;\n\n  /**\n   * The positive class in binary classification.\n   *\n   * This parameter is needed to generate precision, recall, and F1 metrics when\n   * doing binary classification.\n   */\n  classification_positive_class?: string | null;\n\n  /**\n   * If set, we calculate classification-specific metrics such as accuracy and F-1\n   * score using the validation set at the end of every epoch. These metrics can be\n   * viewed in the\n   * [results file](https://platform.openai.com/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).\n   *\n   * In order to compute classification metrics, you must provide a\n   * `validation_file`. Additionally, you must specify `classification_n_classes` for\n   * multiclass classification or `classification_positive_class` for binary\n   * classification.\n   */\n  compute_classification_metrics?: boolean | null;\n\n  /**\n   * The learning rate multiplier to use for training. The fine-tuning learning rate\n   * is the original learning rate used for pretraining multiplied by this value.\n   *\n   * By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on\n   * final `batch_size` (larger learning rates tend to perform better with larger\n   * batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to\n   * see what produces the best results.\n   */\n  learning_rate_multiplier?: number | null;\n\n  /**\n   * The name of the base model to fine-tune. You can select one of \"ada\", \"babbage\",\n   * \"curie\", \"davinci\", or a fine-tuned model created after 2022-04-21 and before\n   * 2023-08-22. To learn more about these models, see the\n   * [Models](https://platform.openai.com/docs/models) documentation.\n   */\n  model?: (string & {}) | 'ada' | 'babbage' | 'curie' | 'davinci' | null;\n\n  /**\n   * The number of epochs to train the model for. An epoch refers to one full cycle\n   * through the training dataset.\n   */\n  n_epochs?: number | null;\n\n  /**\n   * The weight to use for loss on the prompt tokens. This controls how much the\n   * model tries to learn to generate the prompt (as compared to the completion which\n   * always has a weight of 1.0), and can add a stabilizing effect to training when\n   * completions are short.\n   *\n   * If prompts are extremely long (relative to completions), it may make sense to\n   * reduce this weight so as to avoid over-prioritizing learning the prompt.\n   */\n  prompt_loss_weight?: number | null;\n\n  /**\n   * A string of up to 40 characters that will be added to your fine-tuned model\n   * name.\n   *\n   * For example, a `suffix` of \"custom-model-name\" would produce a model name like\n   * `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.\n   */\n  suffix?: string | null;\n\n  /**\n   * The ID of an uploaded file that contains validation data.\n   *\n   * If you provide this file, the data is used to generate validation metrics\n   * periodically during fine-tuning. These metrics can be viewed in the\n   * [fine-tuning results file](https://platform.openai.com/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).\n   * Your train and validation data should be mutually exclusive.\n   *\n   * Your dataset must be formatted as a JSONL file, where each validation example is\n   * a JSON object with the keys \"prompt\" and \"completion\". Additionally, you must\n   * upload your file with the purpose `fine-tune`.\n   *\n   * See the\n   * [fine-tuning guide](https://platform.openai.com/docs/guides/legacy-fine-tuning/creating-training-data)\n   * for more details.\n   */\n  validation_file?: string | null;\n}\n\nexport type FineTuneListEventsParams =\n  | FineTuneListEventsParamsNonStreaming\n  | FineTuneListEventsParamsStreaming;\n\nexport interface FineTuneListEventsParamsBase {\n  /**\n   * Whether to stream events for the fine-tune job. If set to true, events will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available. The stream will terminate with a `data: [DONE]`\n   * message when the job is finished (succeeded, cancelled, or failed).\n   *\n   * If set to false, only events generated so far will be returned.\n   */\n  stream?: boolean;\n}\n\nexport namespace FineTuneListEventsParams {\n  export type FineTuneListEventsParamsNonStreaming = API.FineTuneListEventsParamsNonStreaming;\n  export type FineTuneListEventsParamsStreaming = API.FineTuneListEventsParamsStreaming;\n}\n\nexport interface FineTuneListEventsParamsNonStreaming extends FineTuneListEventsParamsBase {\n  /**\n   * Whether to stream events for the fine-tune job. If set to true, events will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available. The stream will terminate with a `data: [DONE]`\n   * message when the job is finished (succeeded, cancelled, or failed).\n   *\n   * If set to false, only events generated so far will be returned.\n   */\n  stream?: false;\n}\n\nexport interface FineTuneListEventsParamsStreaming extends FineTuneListEventsParamsBase {\n  /**\n   * Whether to stream events for the fine-tune job. If set to true, events will be\n   * sent as data-only\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n   * as they become available. The stream will terminate with a `data: [DONE]`\n   * message when the job is finished (succeeded, cancelled, or failed).\n   *\n   * If set to false, only events generated so far will be returned.\n   */\n  stream: true;\n}\n\nexport namespace FineTunes {\n  export import FineTune = API.FineTune;\n  export import FineTuneEvent = API.FineTuneEvent;\n  export import FineTuneEventsListResponse = API.FineTuneEventsListResponse;\n  export type FineTunesPage = _FineTunesPage;\n  export import FineTuneCreateParams = API.FineTuneCreateParams;\n  export import FineTuneListEventsParams = API.FineTuneListEventsParams;\n  export import FineTuneListEventsParamsNonStreaming = API.FineTuneListEventsParamsNonStreaming;\n  export import FineTuneListEventsParamsStreaming = API.FineTuneListEventsParamsStreaming;\n}\n"],"mappings":"AAAA;SAISA,WAAW,QAAQ,iBAAiB;SAGpCC,IAAI,QAAQ,mBAAmB;AAGxC,OAAM,MAAOC,SAAU,SAAQF,WAAW;;;;;;;;;QASxCG,CAAAC,IAAO,EAA0BC,OAAE,EAA6B;WAC9D,IAAO,CAAAC,IAAK,cAAK;MAAaF,IAAI;MAAA,GAAIC;IAAK;;;;;;;UAQ7CE,CAAAC,UAAS,EAAkBH,OAAE,EAA6B;WACxD,IAAO,CAAAI,GAAI,CAAC,eAAID,UAAe,IAAUH,OAAI;;;;;MAM/CK,CAAAL,OAAK,EAA6B;WAChC,IAAO,CAAAM,UAAK,cAAW,EAAAC,aAAe,EAAAP,OAAe;;;;;QAMvDQ,CAAAL,UAAO,EAAkBH,OAAE,EAA6B;WACtD,IAAO,CAAAC,IAAK,gBAAKE,UAAe,SAAU,EAAAH,OAAW;;YAqBvDS,CAAAN,UACE,EAAkBO,KAClB,EAA4CV,OAC5C,EAA6B;;WAE7B,IAAO,CAAAI,GAAI,CAAC,eAAID,UAAe,SAAU;;aAEvC,UAAS;gBACN;YACH,E,CACDQ,EAAgF,GAAAD,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAAE,MAAA,cAAAD,EAAA,cAClFA,EAAA,GACF;IAED;;;AAGA;;AA+TA;AASA,OATiB,MAASJ,aAAA,SASzBX,IAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}